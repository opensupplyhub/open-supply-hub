{
    "link_type": "dedupe_only",
    "probability_two_random_records_match": 4.599205891373415e-05,
    "retain_matching_columns": true,
    "retain_intermediate_calculation_columns": true,
    "additional_columns_to_retain": [],
    "sql_dialect": "duckdb",
    "linker_uid": "7q9cqsdu",
    "em_convergence": 0.0001,
    "max_iterations": 25,
    "bayes_factor_column_prefix": "bf_",
    "term_frequency_adjustment_column_prefix": "tf_",
    "comparison_vector_value_column_prefix": "gamma_",
    "unique_id_column_name": "os_id",
    "source_dataset_column_name": "source_dataset",
    "blocking_rules_to_generate_predictions": [
        {
            "blocking_rule": "l.\"country_code\" = r.\"country_code\"",
            "sql_dialect": "duckdb"
        }
    ],
    "comparisons": [
        {
            "output_column_name": "name",
            "comparison_levels": [
                {
                    "sql_condition": "\"name_l\" IS NULL OR \"name_r\" IS NULL",
                    "label_for_charts": "name is NULL",
                    "fix_m_probability": false,
                    "fix_u_probability": false,
                    "is_null_level": true
                },
                {
                    "sql_condition": "\"name_l\" = \"name_r\"",
                    "label_for_charts": "Exact match on name",
                    "m_probability": 0.00024394394554031818,
                    "u_probability": 6.640830515545935e-07,
                    "fix_m_probability": false,
                    "fix_u_probability": false,
                    "tf_adjustment_column": "name",
                    "tf_adjustment_weight": 1.0
                },
                {
                    "sql_condition": "jaro_winkler_similarity(\"name_l\", \"name_r\") >= 0.96",
                    "label_for_charts": "Jaro-Winkler distance of name >= 0.96",
                    "m_probability": 0.00036079919273327273,
                    "u_probability": 8.301038144432419e-08,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "jaro_winkler_similarity(\"name_l\", \"name_r\") >= 0.92",
                    "label_for_charts": "Jaro-Winkler distance of name >= 0.92",
                    "m_probability": 0.0006521596622696647,
                    "u_probability": 2.656332206218374e-06,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "jaro_winkler_similarity(\"name_l\", \"name_r\") >= 0.9",
                    "label_for_charts": "Jaro-Winkler distance of name >= 0.9",
                    "m_probability": 0.0009215561987228814,
                    "u_probability": 3.7354671649945886e-06,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "jaro_winkler_similarity(\"name_l\", \"name_r\") >= 0.7",
                    "label_for_charts": "Jaro-Winkler distance of name >= 0.7",
                    "m_probability": 0.0512764357703663,
                    "u_probability": 0.002693437846723987,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "jaro_winkler_similarity(\"name_l\", \"name_r\") >= 0.5",
                    "label_for_charts": "Jaro-Winkler distance of name >= 0.5",
                    "m_probability": 0.5378621248071523,
                    "u_probability": 0.3194906051340593,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "m_probability": 0.4086829804232155,
                    "u_probability": 0.6778088181264125,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                }
            ],
            "comparison_description": "JaroWinklerAtThresholds"
        },
        {
            "output_column_name": "address",
            "comparison_levels": [
                {
                    "sql_condition": "\"address_l\" IS NULL OR \"address_r\" IS NULL",
                    "label_for_charts": "address is NULL",
                    "fix_m_probability": false,
                    "fix_u_probability": false,
                    "is_null_level": true
                },
                {
                    "sql_condition": "\"address_l\" = \"address_r\"",
                    "label_for_charts": "Exact match on address",
                    "m_probability": 0.016273579010074014,
                    "u_probability": 2.9895917363698284e-06,
                    "fix_m_probability": false,
                    "fix_u_probability": false,
                    "tf_adjustment_column": "address",
                    "tf_adjustment_weight": 1.0
                },
                {
                    "sql_condition": "jaccard(\"address_l\", \"address_r\") >= 0.96",
                    "label_for_charts": "Jaccard distance of 'address >= 0.96'",
                    "m_probability": 0.001577094879983645,
                    "u_probability": 3.321768595966476e-07,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "jaccard(\"address_l\", \"address_r\") >= 0.92",
                    "label_for_charts": "Jaccard distance of 'address >= 0.92'",
                    "m_probability": 0.0039546460559331895,
                    "u_probability": 2.325238017176533e-06,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "jaccard(\"address_l\", \"address_r\") >= 0.9",
                    "label_for_charts": "Jaccard distance of 'address >= 0.9'",
                    "m_probability": 0.0029534310568953425,
                    "u_probability": 1.9930611575798856e-06,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "jaccard(\"address_l\", \"address_r\") >= 0.7",
                    "label_for_charts": "Jaccard distance of 'address >= 0.7'",
                    "m_probability": 0.1567206342279767,
                    "u_probability": 0.0010451114445059525,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "jaccard(\"address_l\", \"address_r\") >= 0.5",
                    "label_for_charts": "Jaccard distance of 'address >= 0.5'",
                    "m_probability": 0.3417089506114143,
                    "u_probability": 0.06966114140287256,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "m_probability": 0.47681166415772275,
                    "u_probability": 0.9292861070848507,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                }
            ],
            "comparison_description": "JaccardAtThresholds"
        },
        {
            "output_column_name": "lat_lng",
            "comparison_levels": [
                {
                    "sql_condition": "\"geocoded_location_type_l\" IS NULL OR \"geocoded_location_type_r\" IS NULL",
                    "label_for_charts": "geocoded_location_type is NULL",
                    "fix_m_probability": false,
                    "fix_u_probability": false,
                    "is_null_level": true
                },
                {
                    "sql_condition": "geocoded_location_type_l NOT IN ('ROOFTOP', 'RANGE_INTERPOLATED', 'APPROXIMATE') OR geocoded_location_type_r NOT IN ('ROOFTOP', 'RANGE_INTERPOLATED', 'APPROXIMATE')",
                    "label_for_charts": "Geocoding condition",
                    "fix_m_probability": false,
                    "fix_u_probability": false,
                    "is_null_level": true
                },
                {
                    "sql_condition": "\n        cast(\n            acos(\n                \n        case\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) > 1 then 1\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) < -1 then -1\n            else (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    )\n        end\n    \n            ) * 6371\n            as float\n        )\n     <= 0.005",
                    "label_for_charts": "Distance less than 0.005km",
                    "m_probability": 0.2196326826927343,
                    "u_probability": 0.010076313254797362,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "\n        cast(\n            acos(\n                \n        case\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) > 1 then 1\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) < -1 then -1\n            else (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    )\n        end\n    \n            ) * 6371\n            as float\n        )\n     <= 0.1",
                    "label_for_charts": "Distance less than 0.1km",
                    "m_probability": 0.029440540081440505,
                    "u_probability": 0.001407720234126102,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "\n        cast(\n            acos(\n                \n        case\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) > 1 then 1\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) < -1 then -1\n            else (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    )\n        end\n    \n            ) * 6371\n            as float\n        )\n     <= 0.152",
                    "label_for_charts": "Distance less than 0.152km",
                    "m_probability": 0.013279737258509772,
                    "u_probability": 0.0004445432318292954,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "\n        cast(\n            acos(\n                \n        case\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) > 1 then 1\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) < -1 then -1\n            else (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    )\n        end\n    \n            ) * 6371\n            as float\n        )\n     <= 1.0",
                    "label_for_charts": "Distance less than 1.0km",
                    "m_probability": 0.1968270309160579,
                    "u_probability": 0.00829814032748018,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "\n        cast(\n            acos(\n                \n        case\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) > 1 then 1\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) < -1 then -1\n            else (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    )\n        end\n    \n            ) * 6371\n            as float\n        )\n     <= 5",
                    "label_for_charts": "Distance less than 5km",
                    "m_probability": 0.538232310891923,
                    "u_probability": 0.08701933763058457,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "\n        cast(\n            acos(\n                \n        case\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) > 1 then 1\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) < -1 then -1\n            else (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    )\n        end\n    \n            ) * 6371\n            as float\n        )\n     <= 30",
                    "label_for_charts": "Distance less than 30km",
                    "m_probability": 0.002587698159334381,
                    "u_probability": 0.8927539453211825,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                }
            ],
            "comparison_description": "CustomComparison"
        }
    ]
}