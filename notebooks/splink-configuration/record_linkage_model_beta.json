{
    "link_type": "dedupe_only",
    "probability_two_random_records_match": 0.05,
    "retain_matching_columns": true,
    "retain_intermediate_calculation_columns": true,
    "additional_columns_to_retain": [],
    "sql_dialect": "duckdb",
    "linker_uid": "hh4wtzjf",
    "em_convergence": 0.0001,
    "max_iterations": 25,
    "bayes_factor_column_prefix": "bf_",
    "term_frequency_adjustment_column_prefix": "tf_",
    "comparison_vector_value_column_prefix": "gamma_",
    "unique_id_column_name": "os_id",
    "source_dataset_column_name": "source_dataset",
    "blocking_rules_to_generate_predictions": [
        {
            "blocking_rule": "l.\"country_code\" = r.\"country_code\"",
            "sql_dialect": "duckdb"
        }
    ],
    "comparisons": [
        {
            "output_column_name": "geocoded_location_type",
            "comparison_levels": [
                {
                    "sql_condition": "\"geocoded_location_type_l\" IS NULL OR \"geocoded_location_type_r\" IS NULL",
                    "label_for_charts": "geocoded_location_type is NULL",
                    "fix_m_probability": false,
                    "fix_u_probability": false,
                    "is_null_level": true
                },
                {
                    "sql_condition": "\"geocoded_location_type_l\" = \"geocoded_location_type_r\"",
                    "label_for_charts": "Exact match on geocoded_location_type",
                    "m_probability": 0.7164681211667694,
                    "u_probability": 0.46485786994887734,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "m_probability": 0.2835318788332305,
                    "u_probability": 0.5351421300511227,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                }
            ],
            "comparison_description": "ExactMatch"
        },
        {
            "output_column_name": "name",
            "comparison_levels": [
                {
                    "sql_condition": "\"name_l\" IS NULL OR \"name_r\" IS NULL",
                    "label_for_charts": "name is NULL",
                    "fix_m_probability": false,
                    "fix_u_probability": false,
                    "is_null_level": true
                },
                {
                    "sql_condition": "\"name_l\" = \"name_r\"",
                    "label_for_charts": "Exact match on name",
                    "m_probability": 5.284837097616776e-05,
                    "u_probability": 7.581212502869736e-07,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "jaro_winkler_similarity(\"name_l\", \"name_r\") >= 0.9",
                    "label_for_charts": "Jaro-Winkler distance of name >= 0.9",
                    "m_probability": 0.0008516185028869113,
                    "u_probability": 7.284556361453094e-06,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "jaro_winkler_similarity(\"name_l\", \"name_r\") >= 0.7",
                    "label_for_charts": "Jaro-Winkler distance of name >= 0.7",
                    "m_probability": 0.024863848075879314,
                    "u_probability": 0.0025941920331015514,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "m_probability": 0.9742316850502576,
                    "u_probability": 0.9973977652892867,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                }
            ],
            "comparison_description": "JaroWinklerAtThresholds"
        },
        {
            "output_column_name": "address",
            "comparison_levels": [
                {
                    "sql_condition": "\"address_l\" IS NULL OR \"address_r\" IS NULL",
                    "label_for_charts": "address is NULL",
                    "fix_m_probability": false,
                    "fix_u_probability": false,
                    "is_null_level": true
                },
                {
                    "sql_condition": "\"address_l\" = \"address_r\"",
                    "label_for_charts": "Exact match on address",
                    "m_probability": 0.0024353356073736035,
                    "u_probability": 1.944745815953541e-06,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "jaccard(\"address_l\", \"address_r\") >= 0.9",
                    "label_for_charts": "Jaccard distance of 'address >= 0.9'",
                    "m_probability": 0.0017901454811506841,
                    "u_probability": 1.746975055009113e-06,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "jaccard(\"address_l\", \"address_r\") >= 0.7",
                    "label_for_charts": "Jaccard distance of 'address >= 0.7'",
                    "m_probability": 0.060503151754341865,
                    "u_probability": 0.0009310717807328758,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "m_probability": 0.935271367157134,
                    "u_probability": 0.9990652364983962,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                }
            ],
            "comparison_description": "JaccardAtThresholds"
        },
        {
            "output_column_name": "geocoded_address",
            "comparison_levels": [
                {
                    "sql_condition": "\"geocoded_address_l\" IS NULL OR \"geocoded_address_r\" IS NULL",
                    "label_for_charts": "geocoded_address is NULL",
                    "fix_m_probability": false,
                    "fix_u_probability": false,
                    "is_null_level": true
                },
                {
                    "sql_condition": "\"geocoded_address_l\" = \"geocoded_address_r\"",
                    "label_for_charts": "Exact match on geocoded_address",
                    "m_probability": 0.020979310968135993,
                    "u_probability": 2.1375872880648517e-05,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "jaro_winkler_similarity(\"geocoded_address_l\", \"geocoded_address_r\") >= 0.9",
                    "label_for_charts": "Jaro-Winkler distance of geocoded_address >= 0.9",
                    "m_probability": 0.007831285020574195,
                    "u_probability": 1.3535452353257364e-05,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "jaro_winkler_similarity(\"geocoded_address_l\", \"geocoded_address_r\") >= 0.7",
                    "label_for_charts": "Jaro-Winkler distance of geocoded_address >= 0.7",
                    "m_probability": 0.23497738148407846,
                    "u_probability": 0.0039363981966252645,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "m_probability": 0.7362120225272115,
                    "u_probability": 0.9960286904781408,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                }
            ],
            "comparison_description": "JaroWinklerAtThresholds"
        },
        {
            "output_column_name": "lat_lng",
            "comparison_levels": [
                {
                    "sql_condition": "(\"lat_l\" IS NULL OR \"lat_r\" IS NULL) OR (\"lng_l\" IS NULL OR \"lng_r\" IS NULL)",
                    "label_for_charts": "(lat is NULL) OR (lng is NULL)",
                    "fix_m_probability": false,
                    "fix_u_probability": false,
                    "is_null_level": true
                },
                {
                    "sql_condition": "\n        cast(\n            acos(\n                \n        case\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) > 1 then 1\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) < -1 then -1\n            else (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    )\n        end\n    \n            ) * 6371\n            as float\n        )\n     <= 0.005",
                    "label_for_charts": "Distance less than 0.005km",
                    "m_probability": 0.018801752227460035,
                    "u_probability": 1.7700483104526296e-05,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "\n        cast(\n            acos(\n                \n        case\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) > 1 then 1\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) < -1 then -1\n            else (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    )\n        end\n    \n            ) * 6371\n            as float\n        )\n     <= 0.1",
                    "label_for_charts": "Distance less than 0.1km",
                    "m_probability": 0.002903232528821878,
                    "u_probability": 1.944745815953541e-06,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "\n        cast(\n            acos(\n                \n        case\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) > 1 then 1\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) < -1 then -1\n            else (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    )\n        end\n    \n            ) * 6371\n            as float\n        )\n     <= 0.152",
                    "label_for_charts": "Distance less than 0.152km",
                    "m_probability": 0.0014715981342082343,
                    "u_probability": 1.4832807070832092e-06,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "\n        cast(\n            acos(\n                \n        case\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) > 1 then 1\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) < -1 then -1\n            else (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    )\n        end\n    \n            ) * 6371\n            as float\n        )\n     <= 1.0",
                    "label_for_charts": "Distance less than 1.0km",
                    "m_probability": 0.02738597397625715,
                    "u_probability": 3.513727186112669e-05,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "\n        cast(\n            acos(\n                \n        case\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) > 1 then 1\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) < -1 then -1\n            else (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    )\n        end\n    \n            ) * 6371\n            as float\n        )\n     <= 5",
                    "label_for_charts": "Distance less than 5km",
                    "m_probability": 0.21852525195868966,
                    "u_probability": 0.00029807349853674356,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "\n        cast(\n            acos(\n                \n        case\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) > 1 then 1\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) < -1 then -1\n            else (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    )\n        end\n    \n            ) * 6371\n            as float\n        )\n     <= 30",
                    "label_for_charts": "Distance less than 30km",
                    "m_probability": 0.7308511807835314,
                    "u_probability": 0.002805477129377182,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "m_probability": 6.101039103164918e-05,
                    "u_probability": 0.9968401835905973,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                }
            ],
            "comparison_description": "DistanceInKMAtThresholds"
        }
    ]
}