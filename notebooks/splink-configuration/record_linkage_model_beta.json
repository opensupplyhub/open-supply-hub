{
    "link_type": "dedupe_only",
    "probability_two_random_records_match": 5.659640371212609e-05,
    "retain_matching_columns": true,
    "retain_intermediate_calculation_columns": true,
    "additional_columns_to_retain": [],
    "sql_dialect": "duckdb",
    "linker_uid": "cqtf7r74",
    "em_convergence": 0.0001,
    "max_iterations": 25,
    "bayes_factor_column_prefix": "bf_",
    "term_frequency_adjustment_column_prefix": "tf_",
    "comparison_vector_value_column_prefix": "gamma_",
    "unique_id_column_name": "os_id",
    "source_dataset_column_name": "source_dataset",
    "blocking_rules_to_generate_predictions": [
        {
            "blocking_rule": "l.\"country_code\" = r.\"country_code\"",
            "sql_dialect": "duckdb"
        }
    ],
    "comparisons": [
        {
            "output_column_name": "name",
            "comparison_levels": [
                {
                    "sql_condition": "\"name_l\" IS NULL OR \"name_r\" IS NULL",
                    "label_for_charts": "name is NULL",
                    "fix_m_probability": false,
                    "fix_u_probability": false,
                    "is_null_level": true
                },
                {
                    "sql_condition": "\"name_l\" = \"name_r\"",
                    "label_for_charts": "Exact match on name",
                    "m_probability": 0.00024622559915633634,
                    "u_probability": 1.3366412846349311e-06,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "jaro_winkler_similarity(\"name_l\", \"name_r\") >= 0.96",
                    "label_for_charts": "Jaro-Winkler distance of name >= 0.96",
                    "m_probability": 0.000364174187946751,
                    "u_probability": 7.862595791970183e-07,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "jaro_winkler_similarity(\"name_l\", \"name_r\") >= 0.92",
                    "label_for_charts": "Jaro-Winkler distance of name >= 0.92",
                    "m_probability": 0.0006582549094256066,
                    "u_probability": 2.4374046955107566e-06,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "jaro_winkler_similarity(\"name_l\", \"name_r\") >= 0.9",
                    "label_for_charts": "Jaro-Winkler distance of name >= 0.9",
                    "m_probability": 0.0009301702224906738,
                    "u_probability": 3.145038316788073e-06,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "jaro_winkler_similarity(\"name_l\", \"name_r\") >= 0.7",
                    "label_for_charts": "Jaro-Winkler distance of name >= 0.7",
                    "m_probability": 0.05174301716334865,
                    "u_probability": 0.002699936769004641,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "jaro_winkler_similarity(\"name_l\", \"name_r\") >= 0.5",
                    "label_for_charts": "Jaro-Winkler distance of name >= 0.5",
                    "m_probability": 0.5408581512182925,
                    "u_probability": 0.321091979318857,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "jaro_winkler_similarity(\"name_l\", \"name_r\") >= 0.3",
                    "label_for_charts": "Jaro-Winkler distance of name >= 0.3",
                    "m_probability": 0.38122682727478147,
                    "u_probability": 0.6316017695872593,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "jaro_winkler_similarity(\"name_l\", \"name_r\") >= 0.2",
                    "label_for_charts": "Jaro-Winkler distance of name >= 0.2",
                    "m_probability": 0.019658753979430538,
                    "u_probability": 0.0350347833375241,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "m_probability": 0.004314425445127557,
                    "u_probability": 0.009563825643478772,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                }
            ],
            "comparison_description": "JaroWinklerAtThresholds"
        },
        {
            "output_column_name": "address",
            "comparison_levels": [
                {
                    "sql_condition": "\"address_l\" IS NULL OR \"address_r\" IS NULL",
                    "label_for_charts": "address is NULL",
                    "fix_m_probability": false,
                    "fix_u_probability": false,
                    "is_null_level": true
                },
                {
                    "sql_condition": "\"address_l\" = \"address_r\"",
                    "label_for_charts": "Exact match on address",
                    "m_probability": 0.0164258634956434,
                    "u_probability": 2.358778737591055e-06,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "jaccard(\"address_l\", \"address_r\") >= 0.96",
                    "label_for_charts": "Jaccard distance of 'address >= 0.96'",
                    "m_probability": 0.001591851350172558,
                    "u_probability": 3.9312978959850914e-07,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "jaccard(\"address_l\", \"address_r\") >= 0.92",
                    "label_for_charts": "Jaccard distance of 'address >= 0.92'",
                    "m_probability": 0.003991648784788925,
                    "u_probability": 7.076336212773165e-07,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "jaccard(\"address_l\", \"address_r\") >= 0.9",
                    "label_for_charts": "Jaccard distance of 'address >= 0.9'",
                    "m_probability": 0.002981063012955969,
                    "u_probability": 7.862595791970183e-07,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "jaccard(\"address_l\", \"address_r\") >= 0.7",
                    "label_for_charts": "Jaccard distance of 'address >= 0.7'",
                    "m_probability": 0.15817340885950817,
                    "u_probability": 0.0009998076809069284,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "jaccard(\"address_l\", \"address_r\") >= 0.5",
                    "label_for_charts": "Jaccard distance of 'address >= 0.5'",
                    "m_probability": 0.3443536300147653,
                    "u_probability": 0.06734737875995228,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "jaccard(\"address_l\", \"address_r\") >= 0.3",
                    "label_for_charts": "Jaccard distance of 'address >= 0.3'",
                    "m_probability": 0.32887606640665823,
                    "u_probability": 0.49267072408059914,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "jaccard(\"address_l\", \"address_r\") >= 0.2",
                    "label_for_charts": "Jaccard distance of 'address >= 0.2'",
                    "m_probability": 0.11302332950235783,
                    "u_probability": 0.28083847665037065,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "m_probability": 0.030583138573149645,
                    "u_probability": 0.15813936702644332,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                }
            ],
            "comparison_description": "JaccardAtThresholds"
        },
        {
            "output_column_name": "geocoded_location_type",
            "comparison_levels": [
                {
                    "sql_condition": "\"geocoded_location_type_l\" IS NULL OR \"geocoded_location_type_r\" IS NULL",
                    "label_for_charts": "geocoded_location_type is NULL",
                    "fix_m_probability": false,
                    "fix_u_probability": false,
                    "is_null_level": true
                },
                {
                    "sql_condition": "\"geocoded_location_type_l\" = \"geocoded_location_type_r\"",
                    "label_for_charts": "Exact match on geocoded_location_type",
                    "m_probability": 0.6910745699813807,
                    "u_probability": 0.477589708613857,
                    "fix_m_probability": false,
                    "fix_u_probability": false,
                    "tf_adjustment_column": "geocoded_location_type",
                    "tf_adjustment_weight": 1.0
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "m_probability": 0.3089254300186193,
                    "u_probability": 0.522410291386143,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                }
            ],
            "comparison_description": "ExactMatch"
        },
        {
            "output_column_name": "lat_lng",
            "comparison_levels": [
                {
                    "sql_condition": "\"geocoded_location_type_l\" IS NULL OR \"geocoded_location_type_r\" IS NULL",
                    "label_for_charts": "geocoded_location_type is NULL",
                    "fix_m_probability": false,
                    "fix_u_probability": false,
                    "is_null_level": true
                },
                {
                    "sql_condition": "geocoded_location_type_l NOT IN ('ROOFTOP') OR geocoded_location_type_r NOT IN ('ROOFTOP')",
                    "label_for_charts": "Geocoding condition",
                    "fix_m_probability": false,
                    "fix_u_probability": false,
                    "is_null_level": true
                },
                {
                    "sql_condition": "\n        cast(\n            acos(\n                \n        case\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) > 1 then 1\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) < -1 then -1\n            else (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    )\n        end\n    \n            ) * 6371\n            as float\n        )\n     <= 0.005",
                    "label_for_charts": "Distance less than 0.005km",
                    "m_probability": 0.011322435510283339,
                    "u_probability": 0.0004285510213799343,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "\n        cast(\n            acos(\n                \n        case\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) > 1 then 1\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) < -1 then -1\n            else (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    )\n        end\n    \n            ) * 6371\n            as float\n        )\n     <= 0.1",
                    "label_for_charts": "Distance less than 0.1km",
                    "m_probability": 0.03728157427843953,
                    "u_probability": 0.0007618684824532166,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "\n        cast(\n            acos(\n                \n        case\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) > 1 then 1\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) < -1 then -1\n            else (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    )\n        end\n    \n            ) * 6371\n            as float\n        )\n     <= 0.152",
                    "label_for_charts": "Distance less than 0.152km",
                    "m_probability": 0.018017930688899456,
                    "u_probability": 0.00023808390076663017,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "\n        cast(\n            acos(\n                \n        case\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) > 1 then 1\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) < -1 then -1\n            else (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    )\n        end\n    \n            ) * 6371\n            as float\n        )\n     <= 1.0",
                    "label_for_charts": "Distance less than 1.0km",
                    "m_probability": 0.25372271448246936,
                    "u_probability": 0.010285224513118424,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "\n        cast(\n            acos(\n                \n        case\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) > 1 then 1\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) < -1 then -1\n            else (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    )\n        end\n    \n            ) * 6371\n            as float\n        )\n     <= 5",
                    "label_for_charts": "Distance less than 5km",
                    "m_probability": 0.6776853230296594,
                    "u_probability": 0.08171039474310747,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                },
                {
                    "sql_condition": "\n        cast(\n            acos(\n                \n        case\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) > 1 then 1\n            when (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    ) < -1 then -1\n            else (\n        sin( radians(\"lat_l\") ) * sin( radians(\"lat_r\") ) +\n        cos( radians(\"lat_l\") ) * cos( radians(\"lat_r\") )\n            * cos( radians(\"lng_r\" - \"lng_l\") )\n    )\n        end\n    \n            ) * 6371\n            as float\n        )\n     <= 30",
                    "label_for_charts": "Distance less than 30km",
                    "m_probability": 0.001970022010248734,
                    "u_probability": 0.9065758773391743,
                    "fix_m_probability": false,
                    "fix_u_probability": false
                }
            ],
            "comparison_description": "CustomComparison"
        }
    ]
}