#!/bin/bash
set -e

if [[ -n "${OAR_DEBUG}" ]]; then
    set -x
fi

function usage() {
    echo -n \
"Usage: $(basename "$0") COMMAND OPTION[S]
Execute Terraform subcommands with remote state management.
"
}

# # Temporary solution
# GIT_COMMIT="latest"

if [[ -n "${GIT_COMMIT}" ]]; then
    GIT_COMMIT="${GIT_COMMIT:0:7}"
else
    SHORT_SHA="$(git rev-parse --short HEAD)"
    GIT_COMMIT="${SHORT_SHA:0:7}"

fi

if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    if [ "${1:-}" = "--help" ]; then
        usage
    else
        TERRAFORM_DIR="$(dirname "$0")/../deployment/terraform"
        echo
        echo "Attempting to deploy application version [${GIT_COMMIT}]..."
        echo "-----------------------------------------------------"
        echo
    fi

    if [[ -n "${SETTINGS_BUCKET}" ]]; then
        pushd "${TERRAFORM_DIR}"
        git config --global --add safe.directory /usr/local/src
        echo
        echo "Copy tfvars file from bucket"
        # aws s3 cp "s3://${SETTINGS_BUCKET}/terraform/terraform.tfvars" "${SETTINGS_BUCKET}.tfvars"

        case "${1}" in
            plan)
                echo "DEFAULT_BATCH_CE_DESIRED_CPU"
                # DEFAULT_BATCH_CE_DESIRED_CPU=$(aws batch describe-compute-environments --output text --compute-environments "batch${OAR_DEPLOYMENT_ENVIRONMENT^}DefaultComputeEnvironment" --query "computeEnvironments[].computeResources.desiredvCpus")

                # # Build Lambda function archives
                make -sC lambda-functions/alert_batch_failures
                make -sC lambda-functions/alert_sfn_failures

                # Clear stale modules & remote state, then re-initialize
                echo "Terraform init"
                rm -rf .terraform terraform.tfstate*
                terraform init \
                  -backend-config="bucket=${SETTINGS_BUCKET}" \
                  -backend-config="key=terraform/state"
                echo "Terraform plan"        
                terraform plan \
                          -var="image_tag=${GIT_COMMIT}" \
                          -var="batch_default_ce_desired_vcpus=${DEFAULT_BATCH_CE_DESIRED_CPU:-0}" \
                          -var-file="${SETTINGS_BUCKET}.tfvars" \
                          -out="${SETTINGS_BUCKET}.tfplan"
                ;;
            apply)
                echo "Terraform init"
                rm -rf .terraform terraform.tfstate*
                terraform init \
                  -backend-config="bucket=${SETTINGS_BUCKET}" \
                  -backend-config="key=terraform/state"
                echo "Terraform apply"
                ls -la
                terraform apply "${SETTINGS_BUCKET}.tfplan"

                # # Notify Rollbar of the deploy when running on Jenkins
                # if [[ -n "${OAR_ROLLBAR_ACCESS_TOKEN}" && -n "${OAR_DEPLOYMENT_ENVIRONMENT}" ]]; then
                #     curl -s https://api.rollbar.com/api/1/deploy/ \
                #         -F "access_token=${OAR_ROLLBAR_ACCESS_TOKEN}" \
                #         -F "environment=${OAR_DEPLOYMENT_ENVIRONMENT}" \
                #         -F "revision=${GIT_COMMIT}" \
                #         -F "local_username=jenkins"
                # fi
                ;;
            destroy)
                terraform init \
                  -backend-config="bucket=${SETTINGS_BUCKET}" \
                  -backend-config="key=terraform/state"
                terraform destroy \
                          -var="image_tag=${GIT_COMMIT}" \
                          -var="batch_default_ce_desired_vcpus=${DEFAULT_BATCH_CE_DESIRED_CPU:-0}" \
                          -var-file="${SETTINGS_BUCKET}.tfvars" \
                          --auto-approve \
                          -input=false
                ;;
            *)
                echo "ERROR: I don't have support for that Terraform subcommand!"
                exit 1
                ;;
        esac

        popd
    else
        echo "ERROR: No OAR_SETTINGS_BUCKET variable defined."
        exit 1
    fi
fi
