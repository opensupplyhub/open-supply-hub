#!/bin/bash

set -euo pipefail

ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
REGION="us-east-1"
ENV_NAME=$1
CLOUDFRONT_DOMAIN=$2
LAMBDA_ARN="arn:aws:lambda:$REGION:$ACCOUNT_ID:function:funcOpenSupplyHub${ENV_NAME}RedirectToS3origin"
LAMBDA_VERSION=$(aws lambda list-versions-by-function --function-name "$LAMBDA_ARN" --region "$REGION" | jq -r '.Versions | max_by(.Version) | .Version')

for id in $(aws cloudfront list-distributions --query "DistributionList.Items[*].Id" --output text); do
  domains=$(aws cloudfront get-distribution-config --id $id --query "DistributionConfig.Aliases.Items" --output text)
  if [[ "$domains" == "$CLOUDFRONT_DOMAIN" ]]; then
      if [ ! -z "$DISTRIBUTION_ID" ]; then
          echo "Error: Multiple CloudFront distributions found for domain: $CLOUDFRONT_DOMAIN"
          exit 1
      fi
      echo "Found Distribution ID: $id for Domain: $CLOUDFRONT_DOMAIN"
      DISTRIBUTION_ID=$id
  fi
done
if [ -z "$DISTRIBUTION_ID" ]; then
echo "Error: No CloudFront distribution found for domain: $CLOUDFRONT_DOMAIN"
exit 1
fi

echo "Fetching CloudFront distribution configuration..."
json=$(aws cloudfront get-distribution-config --id "$DISTRIBUTION_ID")
ETAG=$(echo "$json" | jq -r '.ETag')
CONFIG=$(echo "$json" | jq '.DistributionConfig')

CONFIG=$(echo "$CONFIG" | jq 'del(.DefaultCacheBehavior.LambdaFunctionAssociations.Items[] | select(.LambdaFunctionARN == "'$LAMBDA_ARN':'$LAMBDA_VERSION'"))')

echo "Updating CloudFront distribution to detach Lambda@Edge..."
UPDATED_CONFIG=$(echo "$CONFIG" | jq -c '.')
aws cloudfront update-distribution --id "$DISTRIBUTION_ID" --if-match "$ETAG" --distribution-config "$UPDATED_CONFIG"

echo "Waiting for CloudFront distribution deployment..."
aws cloudfront wait distribution-deployed --id "$DISTRIBUTION_ID"

echo "CloudFront distribution updated. Proceeding with Lambda function deletion..."

VERSIONS=$(aws lambda list-versions-by-function --function-name "$LAMBDA_ARN" --region "$REGION" | jq -r '.Versions[].Version')
for version in $VERSIONS; do
  if [[ "$version" != "\$LATEST" ]]; then
      echo "Deleting Lambda version: $version"
      aws lambda delete-function --function-name "$LAMBDA_ARN:$version" --region "$REGION"
  fi
done

echo "Lambda function deletion initiated. Verifying..."

while true;
do
  if ! aws lambda get-function --function-name "$LAMBDA_ARN" --region "$REGION" 2>/dev/null; then
      echo "Lambda function successfully deleted."
      break
  fi
  echo "Waiting for Lambda function to be deleted..."
  sleep 30
done

echo "Process completed successfully."
