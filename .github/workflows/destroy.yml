name: 'Destroy Environment'

on:
  workflow_dispatch:
    inputs:
      deploy-env:
        description: 'Environment to destroy'
        required: true
        type: choice
        options:
        - Pre-prod
        default: Pre-prod

jobs:
  clean_ecr_repositories:
    runs-on: ubuntu-latest
    environment: ${{ inputs.deploy-env }}
    steps:
      - name: Get Environment Name for ${{ vars.ENV_NAME }}
        id: get_env_name
        uses: Entepotenz/change-string-case-action-min-dependencies@v1
        with:
          string: ${{ vars.ENV_NAME }}
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Delete ecr repostiroy for ${{ vars.ENV_NAME }}
        run: |
          ./deployment/delete_ecr opensupplyhub-batch-${{ steps.get_env_name.outputs.lowercase }}
          ./deployment/delete_ecr opensupplyhub-${{ steps.get_env_name.outputs.lowercase }}
          ./deployment/delete_ecr opensupplyhub-kafka-${{ steps.get_env_name.outputs.lowercase }}
          ./deployment/delete_ecr opensupplyhub-deduplicate-${{ steps.get_env_name.outputs.lowercase }}
          ./deployment/delete_ecr opensupplyhub-logstash-${{ steps.get_env_name.outputs.lowercase }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "eu-west-1"

  destroy_lambda_edge_function:
    runs-on: ubuntu-latest
    environment: ${{ inputs.deploy-env }}
    steps:
      - name: Get Environment Name for ${{ vars.ENV_NAME }}
        id: get_env_name
        uses: Entepotenz/change-string-case-action-min-dependencies@v1
        with:
          string: ${{ vars.ENV_NAME }}

      - name: Delete Lambda@Edge function
        run: |
          set -euo pipefail
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          REGION="us-east-1"
          LAMBDA_ARN="arn:aws:lambda:$REGION:$ACCOUNT_ID:function:funcOpenSupplyHub${{ vars.ENV_NAME }}RedirectToS3origin"
          LAMBDA_VERSION=$(aws lambda list-versions-by-function --function-name "$LAMBDA_ARN" --region "$REGION" | jq -r '.Versions | max_by(.Version) | .Version')

          for id in $(aws cloudfront list-distributions --query "DistributionList.Items[*].Id" --output text); do
              domains=$(aws cloudfront get-distribution-config --id $id --query "DistributionConfig.Aliases.Items" --output text)
              if [[ "$domains" == "$CLOUDFRONT_DOMAIN" ]]; then
                  if [ ! -z "$DISTRIBUTION_ID" ]; then
                      echo "Error: Multiple CloudFront distributions found for domain: $CLOUDFRONT_DOMAIN"
                      exit 1
                  fi
                  echo "Found Distribution ID: $id for Domain: $CLOUDFRONT_DOMAIN"
                  DISTRIBUTION_ID=$id
              fi
          done
          if [ -z "$DISTRIBUTION_ID" ]; then
            echo "Error: No CloudFront distribution found for domain: $CLOUDFRONT_DOMAIN"
            exit 1
          fi

          echo "Fetching CloudFront distribution configuration..."
          json=$(aws cloudfront get-distribution-config --id "$DISTRIBUTION_ID")
          ETAG=$(echo "$json" | jq -r '.ETag')
          CONFIG=$(echo "$json" | jq '.DistributionConfig')

          CONFIG=$(echo "$CONFIG" | jq 'del(.DefaultCacheBehavior.LambdaFunctionAssociations.Items[] | select(.LambdaFunctionARN == "'$LAMBDA_ARN':'$LAMBDA_VERSION'"))')

          echo "Updating CloudFront distribution to detach Lambda@Edge..."
          UPDATED_CONFIG=$(echo "$CONFIG" | jq -c '.')
          aws cloudfront update-distribution --id "$DISTRIBUTION_ID" --if-match "$ETAG" --distribution-config "$UPDATED_CONFIG"

          echo "Waiting for CloudFront distribution deployment..."
          aws cloudfront wait distribution-deployed --id "$DISTRIBUTION_ID"

          echo "CloudFront distribution updated. Proceeding with Lambda function deletion..."

          VERSIONS=$(aws lambda list-versions-by-function --function-name "$LAMBDA_ARN" --region "$REGION" | jq -r '.Versions[].Version')
          for version in $VERSIONS; do
              if [[ "$version" != "\$LATEST" ]]; then
                  echo "Deleting Lambda version: $version"
                  aws lambda delete-function --function-name "$LAMBDA_ARN:$version" --region "$REGION"
              fi
          done

          echo "Lambda function deletion initiated. Verifying..."

          while true;
          do
              if ! aws lambda get-function --function-name "$LAMBDA_ARN" --region "$REGION" 2>/dev/null; then
                  echo "Lambda function successfully deleted."
                  break
              fi
              echo "Waiting for Lambda function to be deleted..."
              sleep 30
          done

          echo "Process completed successfully."

  destroy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.deploy-env }}
    needs: clean_ecr_repositories
    steps:
      - name: Get Environment Name for ${{ vars.ENV_NAME }}
        id: get_env_name
        uses: Entepotenz/change-string-case-action-min-dependencies@v1
        with:
          string: ${{ vars.ENV_NAME }}
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Checkout config repository
        uses: actions/checkout@v4
        with:
          repository: 'opensupplyhub/ci-deployment'
          path: 'terraform-config'
          token: ${{ secrets.PAT }}

      - name: Copy tfvars for ${{ vars.ENV_NAME }}
        run: |
          cat "terraform-config/environments/${{ env.TFVAR_NAME }}"  "deployment/environments/${{env.TFVAR_NAME}}"  > "deployment/terraform/${{ env.SETTINGS_BUCKET }}.tfvars"
        env:
          SETTINGS_BUCKET: oshub-settings-${{ steps.get_env_name.outputs.lowercase }}
          TFVAR_NAME: terraform-${{steps.get_env_name.outputs.lowercase}}.tfvars

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.0
          terraform_wrapper: false

      - name: Terraform destroy for ${{ vars.ENV_NAME }}
        run: ./deployment/infra destroy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SETTINGS_BUCKET: oshub-settings-${{ steps.get_env_name.outputs.lowercase }}
          AWS_DEFAULT_REGION: "eu-west-1"
