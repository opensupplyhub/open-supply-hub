# Cursor AI Code Generation Rules

## Python Development Rules for AI Code Generation

When generating Python code, ALWAYS follow these compliance rules:

### Flake8 Validation Command
**ALWAYS validate Python code (.py files) using the project's flake8 command:**
```bash
# macOS/Linux - Only run on Python files that have been modified
docker-compose run --rm --no-deps --entrypoint flake8 django --exclude 'settings.py, manage.py, *.pyc, api/migrations' path/to/modified/file.py

# Ubuntu (newer docker compose) - Only run on Python files that have been modified
docker compose run --rm --no-deps --entrypoint flake8 django --exclude 'settings.py, manage.py, *.pyc, api/migrations' path/to/modified/file.py
```

**Note**: Only run flake8 on Python files (`.py` extension) that have been modified. Do not run flake8 on markdown files, configuration files, or other non-Python files.

### Python Test Execution
**ALWAYS run Python tests using the Docker container:**
```bash
# Enter the Django container shell
docker exec -it open-supply-hub-django-1 bash

# Then run tests from inside the container
python ./manage.py test <test_path>

# Examples:
python ./manage.py test api.tests.test_location_contribution_strategy
python ./manage.py test api.tests.test_location_contribution_strategy.TestLocationContributionStrategy.test_patch_no_required_fields_backfills
python ./manage.py test api.tests.test_production_locations_lookup
```

**Important**: Never use `docker-compose run` for tests. Always use `docker exec -it open-supply-hub-django-1 bash` first, then run tests from inside the container.

### Line Length Rules
- NEVER exceed 79 characters per line
- ALWAYS break long lines using parentheses for function calls and conditions
- ALWAYS use backslash continuation for method chaining
- ALWAYS break strings at logical points
- **CRITICAL**: Method names and docstrings must also be ≤ 79 characters

**Example of proper line breaking:**
```python
# ✅ CORRECT - Break long conditions
if (is_coordinates_without_all_required_fields(cc_ready_data) or
        has_some_required_fields(cc_ready_data)):
    do_something()

# ✅ CORRECT - Break long method calls (use instance methods)
processor = ProductionLocationDataProcessor()
processor.handle_all_required_fields_errors(event_dto)

# ✅ CORRECT - Break long strings
error_message = (
    f"Field {field} is required when coordinates "
    f"are provided."
)
```

### Indentation Rules
- ALWAYS use 4 spaces for indentation (never tabs)
- ALWAYS align continuation lines with opening delimiter or use 4-space indent
- ALWAYS break function parameters after comma, align with opening parenthesis

**Example of proper indentation:**
```python
# ✅ CORRECT - Function parameters
def long_function_name(
    parameter_one: str,
    parameter_two: Dict[str, Any],
    parameter_three: Optional[List[int]] = None
) -> bool:
    pass

# ✅ CORRECT - Conditional statements
if (field not in cc_ready_data or
        not cc_ready_data.get(field)):
    do_something()
```

### Import Rules
- ALWAYS use one import per line
- ALWAYS group imports: standard library, third-party, local imports
- ALWAYS sort imports alphabetically within groups
- ALWAYS use proper import formatting for long import lists

**Example of proper imports:**
```python
# ✅ CORRECT - Standard library first
from typing import Dict, List
from django.test import TestCase

# ✅ CORRECT - Third-party imports
from rest_framework import status
from rest_framework.exceptions import ValidationError

# ✅ CORRECT - Local imports
from api.models.facility.facility import Facility
from api.services.production_locations_lookup import (
    fetch_required_fields,
    has_coordinates,
    get_missing_required_fields,
)
```

### Whitespace Rules
- ALWAYS use one space around operators
- NEVER use spaces inside brackets
- ALWAYS use proper spacing around function calls

**Example of proper whitespace:**
```python
# ✅ CORRECT - Proper spacing
data = {'name': 'Test', 'address': '123 Main St'}
if field not in cc_ready_data or not cc_ready_data.get(field):
    do_something()
```

### Method Call Rules
- ALWAYS use instance methods or single-underscore methods in examples
- NEVER use name-mangled dunder methods (__method__) in example code
- PREFER public methods over private methods when possible
- ALWAYS instantiate classes before calling instance methods

**Example of proper method calls:**
```python
# ✅ CORRECT - Instance method call
processor = ProductionLocationDataProcessor()
processor.handle_all_required_fields_errors(event_dto)

# ✅ CORRECT - Single underscore method
processor._validate_and_backfill_patch_data(data, event_dto)

# ❌ INCORRECT - Dunder method call (avoid in examples)
ProductionLocationDataProcessor.__handle_all_required_fields_errors(event_dto)
```

### Blank Line Rules
- ALWAYS use two blank lines before top-level function/class definitions
- ALWAYS use one blank line before method definitions
- NEVER use extra blank lines inside functions

**Example of proper blank lines:**
```python
# ✅ CORRECT - Class definition
class TestClass(TestCase):
    """Test class docstring."""

    def test_method(self):
        """Test method docstring."""
        pass


def top_level_function():
    """Top-level function docstring."""
    pass
```

### String and Comment Rules
- ALWAYS break long strings at logical points
- ALWAYS use f-string formatting for readability
- ALWAYS use two spaces before inline comments
- ALWAYS use one space after #

**Example of proper strings and comments:**
```python
# ✅ CORRECT - String breaking
error_message = (
    f"Field {field} is required when coordinates "
    f"are provided."
)

# ✅ CORRECT - Comments
data = {'name': 'Test'}  # This is a comment
```

### Naming Rules
- ALWAYS use descriptive variable names
- ALWAYS use snake_case for variables and functions
- ALWAYS use PascalCase for classes
- NEVER use single-letter variables except for loop counters
- **CRITICAL**: Keep method names ≤ 79 characters

**Example of proper naming:**
```python
# ✅ CORRECT - Descriptive names
def get_missing_required_fields(data: Dict) -> List[str]:
    missing_fields = []
    for field in required_fields:
        if not data.get(field):
            missing_fields.append(field)
    return missing_fields

# ✅ CORRECT - Short method names
def test_is_coordinates_without_all_required_fields_coords_missing(self):
    pass
```

## Code Generation Checklist
Before generating ANY Python code, ensure:

1. ✅ All lines ≤ 79 characters
2. ✅ Proper indentation (4 spaces)
3. ✅ One import per line
4. ✅ Proper import grouping and sorting
5. ✅ Appropriate whitespace around operators
6. ✅ Proper blank line usage
7. ✅ Descriptive variable names
8. ✅ Meaningful docstrings
9. ✅ Consistent formatting
10. ✅ **Run flake8 validation on modified Python files (.py) using the docker command above**
11. ✅ **Run Python tests using `docker exec -it open-supply-hub-django-1 bash` then `python ./manage.py test <test_path>`**

## Common Patterns to ALWAYS Use

### Long Function Calls
```python
# ✅ ALWAYS use this pattern
result = some_function(
    parameter_one,
    parameter_two,
    parameter_three
)
```

### Long Method Chains
```python
# ✅ ALWAYS use this pattern (instance methods)
processor = ProductionLocationDataProcessor()
processor.handle_all_required_fields_errors(event_dto)
```

### Long Conditionals
```python
# ✅ ALWAYS use this pattern
if (condition_one and
        condition_two and
        condition_three):
    do_something()
```

### Long Strings
```python
# ✅ ALWAYS use this pattern
message = (
    f"Field {field} is required when coordinates "
    f"are provided."
)
```

### Long Method Names (CRITICAL)
```python
# ❌ BAD - Too long
def test_is_coordinates_without_all_required_fields_with_coordinates_and_missing_fields(self):

# ✅ GOOD - Shortened
def test_is_coordinates_without_all_required_fields_coords_missing(self):
```

## Enforcement Rules
- ALL generated Python code (.py files) MUST pass flake8 validation using the docker command above
- ALL Python tests MUST be run using the Docker container method
- FIX any flake8 errors immediately
- FIX any test failures immediately
- USE these patterns consistently
- REFERENCE this guide for all Python code generation
- **ALWAYS run the flake8 command on modified Python files before considering code complete**
- **ALWAYS run tests using `docker exec -it open-supply-hub-django-1 bash` then `python ./manage.py test <test_path>`**

## Error Prevention
- ALWAYS check line length before writing
- ALWAYS use proper indentation patterns
- ALWAYS format imports correctly
- ALWAYS use descriptive names
- ALWAYS add proper docstrings
- **ALWAYS validate modified Python files (.py) with the project's flake8 command**
- **ALWAYS run tests using the Docker container method to ensure functionality**

This ensures all generated Python code is immediately flake8-compliant and follows Python best practices.
