input{
  kafka {
    bootstrap_servers => "kafka:9092" # TODO: works only locally now
    topics => ["moderation-events"]
    codec => "json"
  }
}

'''
TODO: These data should come from the microservice
Filter above does nott work as expected since it receives data in
format like this (other formats should be addressed as well 
for each case depending on match_type):
[
  {
    "facility_list_item_id": 2407352,
    "facility_id": "PT20242369XF62M", 
    "status": "AUTOMATIC", 
    "results": {
        "match_type": "single_exact_match"
    }, 
    "confidence": 1
  }
]
'''

filter {
  # Transform the incoming event data to match the OpenSearch schema
  mutate {
    rename => { 
      "[facility_id]" => "[os_id]" 
    }
    rename => {
      "[country][alpha_2]" => "[country][alpha_2]"
    }
    rename => {
      "[claim_status]" => "[claim_status]"
    }
    # Add any additional fields that are missing or set default values
    add_field => {
      "name" => "Default Name" # Example placeholder, replace as needed
      "description" => "Default Description" # Example placeholder, replace as needed
    }
  }

  # Remove any fields not required by the OpenSearch schema
  prune {
    whitelist_names => ["os_id", "country.alpha_2", "claim_status", "name", "description"]
  }
}

output {
  '''
  stdout {
    codec => rubydebug
  }
  '''
  opensearch {
    hosts => ["${OPENSEARCH_HOST}:${OPENSEARCH_PORT}"]
    auth_type => {
      type => "${OPENSEARCH_AUTH_TYPE}"
      region => "${AWS_REGION}"
    }
    ssl => "${OPENSEARCH_SSL}"
    ssl_certificate_verification => "${OPENSEARCH_SSL_CERT_VERIFICATION}"
    index => "production-locations"
    document_id => "%{[@metadata][_id]}"
    template_name => "production_locations_template"
    template => "/usr/share/logstash/indexes/production_locations.json"
    legacy_template => false
  }
}
