# Generated by Django 3.2.17 on 2025-09-05 17:38

import django.contrib.postgres.fields
import django.contrib.postgres.indexes
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0176_introduce_enable_dromo_uploading_switch'),
    ]

    operations = [
        migrations.AlterUniqueTogether(
            name='facilityfield',
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name='facilityfield',
            name='facility',
        ),
        migrations.AlterUniqueTogether(
            name='facilitylistitemfield',
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name='facilitylistitemfield',
            name='facility_list_item',
        ),
        migrations.RemoveIndex(
            model_name='facilityindex',
            name='api_facilit_contrib_aa2da9_gin',
        ),
        migrations.AlterField(
            model_name='apilimit',
            name='period_limit',
            field=models.PositiveIntegerField(help_text='The number of requests a contributor can make per month/year.'),
        ),
        migrations.AlterField(
            model_name='extendedfield',
            name='field_name',
            field=models.CharField(choices=[('name', 'name'), ('address', 'address'), ('number_of_workers', 'number_of_workers'), ('native_language_name', 'native_language_name'), ('facility_type', 'facility_type'), ('processing_type', 'processing_type'), ('product_type', 'product_type'), ('parent_company', 'parent_company'), ('parent_company_os_id', 'parent_company_os_id'), ('duns_id', 'duns_id'), ('lei_id', 'lei_id'), ('rba_id', 'rba_id')], help_text='The name of the field, chosen from a strict list.', max_length=200),
        ),
        migrations.AlterField(
            model_name='facilityclaim',
            name='facility_address',
            field=models.CharField(blank=True, help_text='Not editable facility address for this claim.', max_length=200, null=True, verbose_name='address'),
        ),
        migrations.AlterField(
            model_name='facilityclaim',
            name='facility_certifications',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('BCI', 'BCI'), ('B Corp', 'B Corp'), ('Bluesign', 'Bluesign'), ('Canopy', 'Canopy'), ('Cradle to Cradle', 'Cradle to Cradle'), ('EU Ecolabel', 'EU Ecolabel'), ('Fairtrade USA', 'Fairtrade USA'), ('FSC', 'FSC'), ('Global Recycling Standard (GRS)', 'Global Recycling Standard (GRS)'), ('GOTS', 'GOTS'), ('Green Button', 'Green Button'), ('Green Screen for Safer Chemicals', 'Green Screen for Safer Chemicals'), ('Higg Index', 'Higg Index'), ('IMO Control', 'IMO Control'), ('International Wool Textile Organisation (IWTO)', 'International Wool Textile Organisation (IWTO)'), ('ISO 9000', 'ISO 9000'), ('IVN leather', 'IVN leather'), ('Leather Working Group', 'Leather Working Group'), ('Nordic Swan', 'Nordic Swan'), ('Oeko-Tex Standard 100', 'Oeko-Tex Standard 100'), ('Oeko-Tex STeP', 'Oeko-Tex STeP'), ('Oeko-Tex Eco Passport', 'Oeko-Tex Eco Passport'), ('Oeko-Tex Made in Green', 'Oeko-Tex Made in Green'), ('PEFC', 'PEFC'), ('REACH', 'REACH'), ('Responsible Down Standard (RDS)', 'Responsible Down Standard (RDS)'), ('Responsible Wool Standard (RWS)', 'Responsible Wool Standard (RWS)'), ('SA8000', 'SA8000'), ('ABVTEX', 'ABVTEX'), ('Empresa B', 'Empresa B'), ('Origem Sustent치vel', 'Origem Sustent치vel'), ('Selo ABR', 'Selo ABR')], help_text='A certification the facility has achieved', max_length=50, verbose_name='facility certification'), blank=True, help_text="The facility's certifications", null=True, size=None, verbose_name='facility certifications'),
        ),
        migrations.AlterField(
            model_name='facilityclaim',
            name='facility_name_english',
            field=models.CharField(blank=True, help_text='Not editable official English facility name for the claim.', max_length=200, null=True, verbose_name='facility name in English'),
        ),
        migrations.AlterField(
            model_name='facilityclaim',
            name='facility_type',
            field=models.CharField(blank=True, choices=[('final product assembly', 'Final Product Assembly'), ('office hq', 'Office / HQ'), ('printing product dyeing and laundering', 'Printing, Product Dyeing and Laundering'), ('raw material processing or production', 'Raw Material Processing or Production'), ('recruitment agency', 'Recruitment Agency'), ('textile or material production', 'Textile or Material Production'), ('warehousing distribution', 'Warehousing / Distribution')], help_text='The editable facility type for this claim.', max_length=300, null=True, verbose_name='facility type'),
        ),
        migrations.AlterField(
            model_name='facilityindex',
            name='custom_text_search',
            field=models.TextField(default='', help_text='A concatenated string of custom values for searchingthe facility in accent-insensitive and accent-sensitivelookup modes.'),
        ),
        migrations.AlterField(
            model_name='facilitylistitemtemp',
            name='facility_id',
            field=models.CharField(help_text='The facility created from this list item or the previously existing facility to which this list item was matched.', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='facilitylistitemtemp',
            name='id',
            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AlterField(
            model_name='facilitymatchtemp',
            name='facility_id',
            field=models.CharField(help_text='The existing facility that may match an uploaded list item.', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='facilitymatchtemp',
            name='id',
            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AlterField(
            model_name='historicalapilimit',
            name='period_limit',
            field=models.PositiveIntegerField(help_text='The number of requests a contributor can make per month/year.'),
        ),
        migrations.AlterField(
            model_name='historicalextendedfield',
            name='field_name',
            field=models.CharField(choices=[('name', 'name'), ('address', 'address'), ('number_of_workers', 'number_of_workers'), ('native_language_name', 'native_language_name'), ('facility_type', 'facility_type'), ('processing_type', 'processing_type'), ('product_type', 'product_type'), ('parent_company', 'parent_company'), ('parent_company_os_id', 'parent_company_os_id'), ('duns_id', 'duns_id'), ('lei_id', 'lei_id'), ('rba_id', 'rba_id')], help_text='The name of the field, chosen from a strict list.', max_length=200),
        ),
        migrations.AlterField(
            model_name='historicalfacilityclaim',
            name='facility_address',
            field=models.CharField(blank=True, help_text='Not editable facility address for this claim.', max_length=200, null=True, verbose_name='address'),
        ),
        migrations.AlterField(
            model_name='historicalfacilityclaim',
            name='facility_certifications',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('BCI', 'BCI'), ('B Corp', 'B Corp'), ('Bluesign', 'Bluesign'), ('Canopy', 'Canopy'), ('Cradle to Cradle', 'Cradle to Cradle'), ('EU Ecolabel', 'EU Ecolabel'), ('Fairtrade USA', 'Fairtrade USA'), ('FSC', 'FSC'), ('Global Recycling Standard (GRS)', 'Global Recycling Standard (GRS)'), ('GOTS', 'GOTS'), ('Green Button', 'Green Button'), ('Green Screen for Safer Chemicals', 'Green Screen for Safer Chemicals'), ('Higg Index', 'Higg Index'), ('IMO Control', 'IMO Control'), ('International Wool Textile Organisation (IWTO)', 'International Wool Textile Organisation (IWTO)'), ('ISO 9000', 'ISO 9000'), ('IVN leather', 'IVN leather'), ('Leather Working Group', 'Leather Working Group'), ('Nordic Swan', 'Nordic Swan'), ('Oeko-Tex Standard 100', 'Oeko-Tex Standard 100'), ('Oeko-Tex STeP', 'Oeko-Tex STeP'), ('Oeko-Tex Eco Passport', 'Oeko-Tex Eco Passport'), ('Oeko-Tex Made in Green', 'Oeko-Tex Made in Green'), ('PEFC', 'PEFC'), ('REACH', 'REACH'), ('Responsible Down Standard (RDS)', 'Responsible Down Standard (RDS)'), ('Responsible Wool Standard (RWS)', 'Responsible Wool Standard (RWS)'), ('SA8000', 'SA8000'), ('ABVTEX', 'ABVTEX'), ('Empresa B', 'Empresa B'), ('Origem Sustent치vel', 'Origem Sustent치vel'), ('Selo ABR', 'Selo ABR')], help_text='A certification the facility has achieved', max_length=50, verbose_name='facility certification'), blank=True, help_text="The facility's certifications", null=True, size=None, verbose_name='facility certifications'),
        ),
        migrations.AlterField(
            model_name='historicalfacilityclaim',
            name='facility_name_english',
            field=models.CharField(blank=True, help_text='Not editable official English facility name for the claim.', max_length=200, null=True, verbose_name='facility name in English'),
        ),
        migrations.AlterField(
            model_name='historicalfacilityclaim',
            name='facility_type',
            field=models.CharField(blank=True, choices=[('final product assembly', 'Final Product Assembly'), ('office hq', 'Office / HQ'), ('printing product dyeing and laundering', 'Printing, Product Dyeing and Laundering'), ('raw material processing or production', 'Raw Material Processing or Production'), ('recruitment agency', 'Recruitment Agency'), ('textile or material production', 'Textile or Material Production'), ('warehousing distribution', 'Warehousing / Distribution')], help_text='The editable facility type for this claim.', max_length=300, null=True, verbose_name='facility type'),
        ),
        migrations.AlterField(
            model_name='historicalfacilitymatchtemp',
            name='facility_id',
            field=models.CharField(help_text='The existing facility that may match an uploaded list item.', max_length=200, null=True),
        ),
        migrations.AddIndex(
            model_name='facilityindex',
            index=django.contrib.postgres.indexes.GinIndex(fields=['contrib_types', 'contributors_id', 'lists'], name='api_facilit_contrib_8924ea_gin'),
        ),
        migrations.DeleteModel(
            name='FacilityField',
        ),
        migrations.DeleteModel(
            name='FacilityListItemField',
        ),
    ]
